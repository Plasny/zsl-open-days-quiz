// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package model

import (
	"context"
	"database/sql"
)

const addTime = `-- name: AddTime :exec
INSERT OR REPLACE INTO times (id, user_id, time, type)
VALUES (
    (SELECT id FROM times t WHERE t.user_id = ? AND t.type = ?),
    ?, ?, ?
)
`

type AddTimeParams struct {
	UserID   int64
	Type     string
	UserID_2 int64
	Time     int64
	Type_2   string
}

func (q *Queries) AddTime(ctx context.Context, arg AddTimeParams) error {
	_, err := q.db.ExecContext(ctx, addTime,
		arg.UserID,
		arg.Type,
		arg.UserID_2,
		arg.Time,
		arg.Type_2,
	)
	return err
}

const addUserReturnId = `-- name: AddUserReturnId :one
INSERT INTO users (name) 
VALUES (?) 
RETURNING id
`

func (q *Queries) AddUserReturnId(ctx context.Context, name sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, addUserReturnId, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getAllTotalTimes = `-- name: GetAllTotalTimes :many
SELECT t.user_id, u.name, SUM(t.time) total_time, COUNT(*) quests_done
FROM times t
INNER JOIN users u
    ON t.user_id = u.id
GROUP BY user_id
ORDER BY 
    quests_done DESC,
    total_time ASC
`

type GetAllTotalTimesRow struct {
	UserID     int64
	Name       sql.NullString
	TotalTime  sql.NullFloat64
	QuestsDone int64
}

func (q *Queries) GetAllTotalTimes(ctx context.Context) ([]GetAllTotalTimesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllTotalTimes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTotalTimesRow
	for rows.Next() {
		var i GetAllTotalTimesRow
		if err := rows.Scan(
			&i.UserID,
			&i.Name,
			&i.TotalTime,
			&i.QuestsDone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalTime = `-- name: GetTotalTime :one
SELECT SUM(time) total_time
FROM times
WHERE user_id = ?
GROUP BY user_id
`

func (q *Queries) GetTotalTime(ctx context.Context, userID int64) (sql.NullFloat64, error) {
	row := q.db.QueryRowContext(ctx, getTotalTime, userID)
	var total_time sql.NullFloat64
	err := row.Scan(&total_time)
	return total_time, err
}
